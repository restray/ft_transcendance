// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ONLINE
  AWAY
  PLAYING
  OFFLINE
}

enum FriendShipStatus {
  WAITING
  DENIED
  ACCEPTED
  BLOCKED
}

enum ChannelType {
  PRIVATE
  PROTECTED
  PUBLIC
}

enum ChannelUserStatus {
  BAN
  KICK
  MUTE
  INVITE
  USER
  MODERATOR
  ADMIN
}

enum ChannelMessageType {
  MESSAGE
  INVITE
  SYSTEM
}

model User {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  status         Status           @default(OFFLINE)
  avatar         String           @default("uploads/user/default.jpg")
  otp_secret     String?
  otp_enable     Boolean          @default(false)
  intra_id       String           @unique
  friendRequest  FriendShip[]     @relation("friends_requests")
  friendProposal FriendShip[]     @relation("friends_proposals")
  channelsOwner  Channel[]        @relation("channels_owner")
  channels       ChannelUser[]    @relation("channel_user_user")
  ChannelMessage ChannelMessage[]
}

model FriendShip {

  requesterId Int
  receiverId  Int
  status      FriendShipStatus @default(WAITING)

  requester User @relation("friends_requests", fields: [requesterId], references: [id])
  receiver  User @relation("friends_proposals", fields: [receiverId], references: [id])
  @@id([requesterId, receiverId])
}

model Channel {
  id       Int         @id @default(autoincrement())
  type     ChannelType
  name     String
  ownerId  Int
  password String?

  owner    User             @relation("channels_owner", fields: [ownerId], references: [id], onDelete: Cascade)
  users    ChannelUser[]    @relation("channel_user_channel")
  messages ChannelMessage[]
}

model ChannelUser {
  channelId Int
  userId    Int
  until     DateTime?

  user    User              @relation("channel_user_user", fields: [userId], references: [id], onDelete: Cascade)
  channel Channel           @relation("channel_user_channel", fields: [channelId], references: [id], onDelete: Cascade)
  state   ChannelUserStatus @default(USER)

  messages ChannelMessage[]
  @@id([channelId, userId])
}

model ChannelMessage {
  id Int @id @default(autoincrement())

  userId    Int
  channelId Int
  content   String

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  type ChannelMessageType @default(MESSAGE)

  postedAt             DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  ChannelUser          ChannelUser? @relation(fields: [channelUserChannelId, channelUserUserId], references: [channelId, userId])
  channelUserChannelId Int?
  channelUserUserId    Int?
}
